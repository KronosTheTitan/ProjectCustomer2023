using Map;
using System.Collections.Generic;
using System;
using UnityEngine;

/// <summary>
/// Represents a pair of a tile type and its corresponding chance.
/// </summary>
[Serializable]
public struct TileChancePair
{
    /// <summary>
    /// The type of the tile.
    /// </summary>
    public TileType type;

    /// <summary>
    /// The chance associated with the tile (between 0 and 100).
    /// </summary>
    [Range(0, 100)]
    public int chance;
}

/// <summary>
/// A ScriptableObject representing game difficulty settings.
/// </summary>
[CreateAssetMenu(fileName = "New Difficulty", menuName = "ProjectCustomer/Difficulty")]
public class DifficultySetting : ScriptableObject, ISerializationCallbackReceiver
{
    /// <summary>
    /// The income generated by a campsite.
    /// </summary>
    [SerializeField] private int campsiteIncome;

    /// <summary>
    /// The penalty for having a fire.
    /// </summary>
    [SerializeField] private int firePenalty;

    /// <summary>
    /// The cost of placing a tile.
    /// </summary>
    [SerializeField] private int tileCost;

    /// <summary>
    /// The cost of bulldozing a tile.
    /// </summary>
    [SerializeField] private int bulldozeCost;

    /// <summary>
    /// The cost of extinguishing a fire.
    /// </summary>
    [SerializeField] private int extinguishCost;

    /// <summary>
    /// The grace period before fires start.
    /// </summary>
    [SerializeField] private int gracePeriod;

    /// <summary>
    /// The chance of random fires (between 0 and 100).
    /// </summary>
    [SerializeField, Range(0, 100)] private int randomFireChance;

    /// <summary>
    /// Get the campsite income value.
    /// </summary>
    public int CampsiteIncome => campsiteIncome;

    /// <summary>
    /// Get the fire penalty value.
    /// </summary>
    public int FirePenalty => firePenalty;

    /// <summary>
    /// Get the tile cost value.
    /// </summary>
    public int TileCost => tileCost;

    /// <summary>
    /// Get the bulldoze cost value.
    /// </summary>
    public int BulldozeCost => bulldozeCost;

    /// <summary>
    /// Get the extinguish cost value.
    /// </summary>
    public int ExtinguishCost => extinguishCost;

    /// <summary>
    /// Get the random fire chance value.
    /// </summary>
    public int RandomFireChance => randomFireChance;

    /// <summary>
    /// Get the grace period value.
    /// </summary>
    public int GracePeriod => gracePeriod;

    /// <summary>
    /// The list of fire spread chances for different tile types.
    /// </summary>
    [SerializeField] private List<TileChancePair> fireSpreadChancesSetup;

    /// <summary>
    /// A dictionary containing the fire spread chances for each tile type.
    /// </summary>
    public readonly Dictionary<TileType, int> FireSpreadChances = new Dictionary<TileType, int>();

    /// <summary>
    /// Called before serialization.
    /// </summary>
    public void OnBeforeSerialize()
    {
        // Implementation not provided.
    }

    /// <summary>
    /// Called after deserialization.
    /// Populates the FireSpreadChances dictionary.
    /// </summary>
    public void OnAfterDeserialize()
    {
        foreach (TileChancePair pair in fireSpreadChancesSetup)
        {
            if (FireSpreadChances.ContainsKey(pair.type))
                continue;
            FireSpreadChances.Add(pair.type, pair.chance);
        }
    }
}